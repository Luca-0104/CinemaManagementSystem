title getMovie Expanded
participant Cinema
participant MovieMapper
database Database
entity m

alt movie already in cache
Cinema->MovieMapper:getMovie(title : String, runningTime : int, year : int)
activate MovieMapper
MovieMapper->MovieMapper:getFromCacheByDetails(title : String, runningTime : int, year : int)
note left of MovieMapper:Movie found in cache
MovieMapper-->Cinema:return m : Movie
deactivate MovieMapper
else movie not already in cache
Cinema->MovieMapper:getMovie(title : String, runningTime : int, year : int)
activate MovieMapper
MovieMapper->MovieMapper:getFromCacheByDetails(title : String, runningTime : int, year : int)
note left of MovieMapper:Movie not found in cache

MovieMapper->MovieMapper:getMovie(sql : String)
activate MovieMapper
MovieMapper->Database:executeQuery(sql : String)
MovieMapper->*m:PersistentMovie(title : String, runningTime : int, year : int)
activate m
m-->MovieMapper:
deactivate m
MovieMapper-->MovieMapper:return m
deactivate MovieMapper

MovieMapper-->Cinema:return m : Movie
deactivate MovieMapper
else movie not already in cache or database
Cinema->MovieMapper:getMovie(title : String, runningTime : int, year : int)
activate MovieMapper
MovieMapper->MovieMapper:getFromCacheByDetails(title : String, runningTime : int, year : int)
note left of MovieMapper:Movie not found in cache

MovieMapper->MovieMapper:getMovie(sql : String)
activate MovieMapper
MovieMapper->Database:executeQuery(sql : String)

MovieMapper-->MovieMapper:
deactivate MovieMapper

note left of MovieMapper:Movie not found in database

MovieMapper->MovieMapper:addMovie(title : String, runningTime : int, year : int)
activate MovieMapper

MovieMapper->MovieMapper:getFromCacheByDetails(title : String, runningTime : int, year : int)
note over MovieMapper:still not there
MovieMapper->Database:executeUpdate(sql : String)
note over MovieMapper:inserted into database\nObject is not created because we need to know what oid was generated by the database

MovieMapper->MovieMapper:getMovie(title : String, runningTime : int, year : int)

activate MovieMapper
MovieMapper->MovieMapper:getFromCacheByDetails(title : String, runningTime : int, year : int)
note over MovieMapper:not in cache yet
MovieMapper->MovieMapper:getMovie(sql : String)
activate MovieMapper
MovieMapper->Database:executeQuery(sql : String)
MovieMapper->*m:PersistentMovie(title : String, runningTime : int, year : int)
activate m
m-->MovieMapper:
deactivate m
MovieMapper-->MovieMapper:return m
deactivate MovieMapper
MovieMapper->MovieMapper:addToCache(m : Movie)

MovieMapper-->MovieMapper:return m
deactivate MovieMapper

MovieMapper-->MovieMapper:return m
deactivate MovieMapper
MovieMapper-->Cinema:return m : Movie
deactivate MovieMapper
end